from dataclasses import dataclass
from os import system,path,listdir,getcwd,mkdir
from json import loads as JsonLoad
from json import dump as DoJson
import os
from colorama import * # type: ignore
from tomllib import loads as TomlLoad
import keyboard # type: ignore

parent_dir = path.dirname(path.realpath(__file__))

OBJT_DIR = "directory"
OBJT_FILE = "file"
STRUCTURE = "structure"

def GetType(Type: str) -> str|int:
    if Type[0] != "#":
        return -1
    match Type[1:]:
        case "dir":
            return OBJT_DIR
        case "file":
            return OBJT_FILE
        case "struct":
            return STRUCTURE
        case _:
            return -1

def MakeFile(path: str) -> None:
    with open(path,"w") as f:
        f.close()



def ListToString(_list: list[str]) -> str:
    string = ""
    for i in _list:
        string += i + " "
    return string

def getc():
    try:
        return keyboard.read_key()
    except KeyboardInterrupt:
        return None

def RunCommand(command,args):
    system(f"{command} {ListToString(args)}")

with open(path.join(parent_dir,"UseConfig")) as d:
    ConfigPath = TomlLoad(d.read())["active"]

def struct(name: str,entry: str) -> None:
    mkdir("lib")
    mkdir("res")
    mkdir("src")
    mkdir("docs")
    MakeFile("Readme")
    with open(".spin","w") as f:
        with open(ConfigPath) as f:
            config = JsonLoad(f.read())
        DoJson(config,f)
        f.close()
    with open("Readme","w") as about:
        about.write(f"\n\nproject: {name}\nentry: {entry}\n\ngenerated by Spiner. copyright 2024 EliaOndacs")
    MakeFile("License".upper())


@dataclass
class file:
    name: str
    data: str
    def GetDict(self) -> dict[str,str]:
        return {".type":"@file",".name":self.name,":data":self.data}
    def SetDict(self,data):
        if data[".type"] != "@file":
            return
        self.name = data[".name"]
        self.data = data[":data"]
        return

@dataclass
class folder:
    container: list # type: ignore
    name: str
    def GetDict(self):
        return {".type":"@folder",".name":self.name,
                ".container":{item.name:item.GetDict() for item in self.container}}
    def SetDict(self, data):
        if data[".type"] != "@folder":
            return
        self.name = data[".name"]
        for ObjectName in data[".container"]:
            obj = data[".container"][ObjectName]
            match obj[".type"]:
                case "@folder":
                    f = folder([],"")
                    f.SetDict(obj)
                    self.container.append(f)
                case "@file":
                    f = file("","")
                    f.SetDict(obj)
                    self.container.append(f)
        return

def Generate(f: folder):
    mkdir(f.name)
    __root__ = f.name
    def visit_folder(_f: folder,_path: str):
        for item in _f.container:
            match item.type:
                case "@folder":
                    visit_folder(item,path.join(_path,item.name))
                    mkdir(path.join(_path,item.name))
                case "@file":
                    with open(path.join(_path,item.name),"w") as f:
                        f.write(item.data)
    visit_folder(f,__root__)


if ".spin" in listdir(getcwd()):
    IsSpin = True
    Spin = path.join(getcwd(),".spin")
else:
    IsSpin = False
    Spin = ConfigPath
if IsSpin == True:
    with open(".spin") as f:
        config = JsonLoad(f.read())
else:
    with open(ConfigPath) as f:
        config = JsonLoad(f.read())


